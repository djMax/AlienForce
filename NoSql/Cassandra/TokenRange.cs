/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace AlienForce.NoSql.Cassandra
{

  [Serializable]
  public partial class TokenRange : TBase
  {
    private string start_token;
    private string end_token;
    private List<string> endpoints;

    public string Start_token
    {
      get
      {
        return start_token;
      }
      set
      {
        __isset.start_token = true;
        this.start_token = value;
      }
    }

    public string End_token
    {
      get
      {
        return end_token;
      }
      set
      {
        __isset.end_token = true;
        this.end_token = value;
      }
    }

    public List<string> Endpoints
    {
      get
      {
        return endpoints;
      }
      set
      {
        __isset.endpoints = true;
        this.endpoints = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool start_token;
      public bool end_token;
      public bool endpoints;
    }

    public TokenRange() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              this.start_token = iprot.ReadString();
              this.__isset.start_token = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.end_token = iprot.ReadString();
              this.__isset.end_token = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                this.endpoints = new List<string>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  string _elem18 = null;
                  _elem18 = iprot.ReadString();
                  this.endpoints.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
              this.__isset.endpoints = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TokenRange");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.start_token != null && __isset.start_token) {
        field.Name = "start_token";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.start_token);
        oprot.WriteFieldEnd();
      }
      if (this.end_token != null && __isset.end_token) {
        field.Name = "end_token";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.end_token);
        oprot.WriteFieldEnd();
      }
      if (this.endpoints != null && __isset.endpoints) {
        field.Name = "endpoints";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, this.endpoints.Count));
          foreach (string _iter19 in this.endpoints)
          {
            oprot.WriteString(_iter19);
            oprot.WriteListEnd();
          }
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TokenRange(");
      sb.Append("start_token: ");
      sb.Append(this.start_token);
      sb.Append(",end_token: ");
      sb.Append(this.end_token);
      sb.Append(",endpoints: ");
      sb.Append(this.endpoints);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
