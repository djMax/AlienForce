/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace AlienForce.NoSql.Cassandra
{
  public class Cassandra {
    public interface Iface {
      void login(string keyspace, AuthenticationRequest auth_request);
      ColumnOrSuperColumn get(string keyspace, string key, ColumnPath column_path, ConsistencyLevel consistency_level);
      List<ColumnOrSuperColumn> get_slice(string keyspace, string key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level);
      Dictionary<string, ColumnOrSuperColumn> multiget(string keyspace, List<string> keys, ColumnPath column_path, ConsistencyLevel consistency_level);
      Dictionary<string, List<ColumnOrSuperColumn>> multiget_slice(string keyspace, List<string> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level);
      int get_count(string keyspace, string key, ColumnParent column_parent, ConsistencyLevel consistency_level);
      List<KeySlice> get_range_slice(string keyspace, ColumnParent column_parent, SlicePredicate predicate, string start_key, string finish_key, int row_count, ConsistencyLevel consistency_level);
      List<KeySlice> get_range_slices(string keyspace, ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level);
      void insert(string keyspace, string key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level);
      void batch_insert(string keyspace, string key, Dictionary<string, List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level);
      void remove(string keyspace, string key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level);
      void batch_mutate(string keyspace, Dictionary<string, Dictionary<string, List<Mutation>>> mutation_map, ConsistencyLevel consistency_level);
      string get_string_property(string property);
      List<string> get_string_list_property(string property);
      THashSet<string> describe_keyspaces();
      string describe_cluster_name();
      string describe_version();
      List<TokenRange> describe_ring(string keyspace);
      Dictionary<string, Dictionary<string, string>> describe_keyspace(string keyspace);
      List<string> describe_splits(string start_token, string end_token, int keys_per_split);
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public void login(string keyspace, AuthenticationRequest auth_request)
      {
        send_login(keyspace, auth_request);
        recv_login();
      }

      public void send_login(string keyspace, AuthenticationRequest auth_request)
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.Keyspace = keyspace;
        args.Auth_request = auth_request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.authnx) {
          throw result.Authnx;
        }
        if (result.__isset.authzx) {
          throw result.Authzx;
        }
        return;
      }

      public ColumnOrSuperColumn get(string keyspace, string key, ColumnPath column_path, ConsistencyLevel consistency_level)
      {
        send_get(keyspace, key, column_path, consistency_level);
        return recv_get();
      }

      public void send_get(string keyspace, string key, ColumnPath column_path, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("get", TMessageType.Call, seqid_));
        get_args args = new get_args();
        args.Keyspace = keyspace;
        args.Key = key;
        args.Column_path = column_path;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public ColumnOrSuperColumn recv_get()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_result result = new get_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.nfe) {
          throw result.Nfe;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get failed: unknown result");
      }

      public List<ColumnOrSuperColumn> get_slice(string keyspace, string key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
      {
        send_get_slice(keyspace, key, column_parent, predicate, consistency_level);
        return recv_get_slice();
      }

      public void send_get_slice(string keyspace, string key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("get_slice", TMessageType.Call, seqid_));
        get_slice_args args = new get_slice_args();
        args.Keyspace = keyspace;
        args.Key = key;
        args.Column_parent = column_parent;
        args.Predicate = predicate;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<ColumnOrSuperColumn> recv_get_slice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_slice_result result = new get_slice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_slice failed: unknown result");
      }

      public Dictionary<string, ColumnOrSuperColumn> multiget(string keyspace, List<string> keys, ColumnPath column_path, ConsistencyLevel consistency_level)
      {
        send_multiget(keyspace, keys, column_path, consistency_level);
        return recv_multiget();
      }

      public void send_multiget(string keyspace, List<string> keys, ColumnPath column_path, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("multiget", TMessageType.Call, seqid_));
        multiget_args args = new multiget_args();
        args.Keyspace = keyspace;
        args.Keys = keys;
        args.Column_path = column_path;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<string, ColumnOrSuperColumn> recv_multiget()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        multiget_result result = new multiget_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "multiget failed: unknown result");
      }

      public Dictionary<string, List<ColumnOrSuperColumn>> multiget_slice(string keyspace, List<string> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
      {
        send_multiget_slice(keyspace, keys, column_parent, predicate, consistency_level);
        return recv_multiget_slice();
      }

      public void send_multiget_slice(string keyspace, List<string> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("multiget_slice", TMessageType.Call, seqid_));
        multiget_slice_args args = new multiget_slice_args();
        args.Keyspace = keyspace;
        args.Keys = keys;
        args.Column_parent = column_parent;
        args.Predicate = predicate;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<string, List<ColumnOrSuperColumn>> recv_multiget_slice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        multiget_slice_result result = new multiget_slice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "multiget_slice failed: unknown result");
      }

      public int get_count(string keyspace, string key, ColumnParent column_parent, ConsistencyLevel consistency_level)
      {
        send_get_count(keyspace, key, column_parent, consistency_level);
        return recv_get_count();
      }

      public void send_get_count(string keyspace, string key, ColumnParent column_parent, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("get_count", TMessageType.Call, seqid_));
        get_count_args args = new get_count_args();
        args.Keyspace = keyspace;
        args.Key = key;
        args.Column_parent = column_parent;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public int recv_get_count()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_count_result result = new get_count_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_count failed: unknown result");
      }

      public List<KeySlice> get_range_slice(string keyspace, ColumnParent column_parent, SlicePredicate predicate, string start_key, string finish_key, int row_count, ConsistencyLevel consistency_level)
      {
        send_get_range_slice(keyspace, column_parent, predicate, start_key, finish_key, row_count, consistency_level);
        return recv_get_range_slice();
      }

      public void send_get_range_slice(string keyspace, ColumnParent column_parent, SlicePredicate predicate, string start_key, string finish_key, int row_count, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("get_range_slice", TMessageType.Call, seqid_));
        get_range_slice_args args = new get_range_slice_args();
        args.Keyspace = keyspace;
        args.Column_parent = column_parent;
        args.Predicate = predicate;
        args.Start_key = start_key;
        args.Finish_key = finish_key;
        args.Row_count = row_count;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<KeySlice> recv_get_range_slice()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_range_slice_result result = new get_range_slice_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_range_slice failed: unknown result");
      }

      public List<KeySlice> get_range_slices(string keyspace, ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level)
      {
        send_get_range_slices(keyspace, column_parent, predicate, range, consistency_level);
        return recv_get_range_slices();
      }

      public void send_get_range_slices(string keyspace, ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("get_range_slices", TMessageType.Call, seqid_));
        get_range_slices_args args = new get_range_slices_args();
        args.Keyspace = keyspace;
        args.Column_parent = column_parent;
        args.Predicate = predicate;
        args.Range = range;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<KeySlice> recv_get_range_slices()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_range_slices_result result = new get_range_slices_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_range_slices failed: unknown result");
      }

      public void insert(string keyspace, string key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level)
      {
        send_insert(keyspace, key, column_path, value, timestamp, consistency_level);
        recv_insert();
      }

      public void send_insert(string keyspace, string key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("insert", TMessageType.Call, seqid_));
        insert_args args = new insert_args();
        args.Keyspace = keyspace;
        args.Key = key;
        args.Column_path = column_path;
        args.Value = value;
        args.Timestamp = timestamp;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_insert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        insert_result result = new insert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        return;
      }

      public void batch_insert(string keyspace, string key, Dictionary<string, List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level)
      {
        send_batch_insert(keyspace, key, cfmap, consistency_level);
        recv_batch_insert();
      }

      public void send_batch_insert(string keyspace, string key, Dictionary<string, List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("batch_insert", TMessageType.Call, seqid_));
        batch_insert_args args = new batch_insert_args();
        args.Keyspace = keyspace;
        args.Key = key;
        args.Cfmap = cfmap;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_batch_insert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batch_insert_result result = new batch_insert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        return;
      }

      public void remove(string keyspace, string key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level)
      {
        send_remove(keyspace, key, column_path, timestamp, consistency_level);
        recv_remove();
      }

      public void send_remove(string keyspace, string key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("remove", TMessageType.Call, seqid_));
        remove_args args = new remove_args();
        args.Keyspace = keyspace;
        args.Key = key;
        args.Column_path = column_path;
        args.Timestamp = timestamp;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_remove()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        remove_result result = new remove_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        return;
      }

      public void batch_mutate(string keyspace, Dictionary<string, Dictionary<string, List<Mutation>>> mutation_map, ConsistencyLevel consistency_level)
      {
        send_batch_mutate(keyspace, mutation_map, consistency_level);
        recv_batch_mutate();
      }

      public void send_batch_mutate(string keyspace, Dictionary<string, Dictionary<string, List<Mutation>>> mutation_map, ConsistencyLevel consistency_level)
      {
        oprot_.WriteMessageBegin(new TMessage("batch_mutate", TMessageType.Call, seqid_));
        batch_mutate_args args = new batch_mutate_args();
        args.Keyspace = keyspace;
        args.Mutation_map = mutation_map;
        args.Consistency_level = consistency_level;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_batch_mutate()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        batch_mutate_result result = new batch_mutate_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ire) {
          throw result.Ire;
        }
        if (result.__isset.ue) {
          throw result.Ue;
        }
        if (result.__isset.te) {
          throw result.Te;
        }
        return;
      }

      public string get_string_property(string property)
      {
        send_get_string_property(property);
        return recv_get_string_property();
      }

      public void send_get_string_property(string property)
      {
        oprot_.WriteMessageBegin(new TMessage("get_string_property", TMessageType.Call, seqid_));
        get_string_property_args args = new get_string_property_args();
        args.Property = property;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_get_string_property()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_string_property_result result = new get_string_property_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_string_property failed: unknown result");
      }

      public List<string> get_string_list_property(string property)
      {
        send_get_string_list_property(property);
        return recv_get_string_list_property();
      }

      public void send_get_string_list_property(string property)
      {
        oprot_.WriteMessageBegin(new TMessage("get_string_list_property", TMessageType.Call, seqid_));
        get_string_list_property_args args = new get_string_list_property_args();
        args.Property = property;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_get_string_list_property()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_string_list_property_result result = new get_string_list_property_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_string_list_property failed: unknown result");
      }

      public THashSet<string> describe_keyspaces()
      {
        send_describe_keyspaces();
        return recv_describe_keyspaces();
      }

      public void send_describe_keyspaces()
      {
        oprot_.WriteMessageBegin(new TMessage("describe_keyspaces", TMessageType.Call, seqid_));
        describe_keyspaces_args args = new describe_keyspaces_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public THashSet<string> recv_describe_keyspaces()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        describe_keyspaces_result result = new describe_keyspaces_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "describe_keyspaces failed: unknown result");
      }

      public string describe_cluster_name()
      {
        send_describe_cluster_name();
        return recv_describe_cluster_name();
      }

      public void send_describe_cluster_name()
      {
        oprot_.WriteMessageBegin(new TMessage("describe_cluster_name", TMessageType.Call, seqid_));
        describe_cluster_name_args args = new describe_cluster_name_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_describe_cluster_name()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        describe_cluster_name_result result = new describe_cluster_name_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "describe_cluster_name failed: unknown result");
      }

      public string describe_version()
      {
        send_describe_version();
        return recv_describe_version();
      }

      public void send_describe_version()
      {
        oprot_.WriteMessageBegin(new TMessage("describe_version", TMessageType.Call, seqid_));
        describe_version_args args = new describe_version_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public string recv_describe_version()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        describe_version_result result = new describe_version_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "describe_version failed: unknown result");
      }

      public List<TokenRange> describe_ring(string keyspace)
      {
        send_describe_ring(keyspace);
        return recv_describe_ring();
      }

      public void send_describe_ring(string keyspace)
      {
        oprot_.WriteMessageBegin(new TMessage("describe_ring", TMessageType.Call, seqid_));
        describe_ring_args args = new describe_ring_args();
        args.Keyspace = keyspace;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<TokenRange> recv_describe_ring()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        describe_ring_result result = new describe_ring_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "describe_ring failed: unknown result");
      }

      public Dictionary<string, Dictionary<string, string>> describe_keyspace(string keyspace)
      {
        send_describe_keyspace(keyspace);
        return recv_describe_keyspace();
      }

      public void send_describe_keyspace(string keyspace)
      {
        oprot_.WriteMessageBegin(new TMessage("describe_keyspace", TMessageType.Call, seqid_));
        describe_keyspace_args args = new describe_keyspace_args();
        args.Keyspace = keyspace;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Dictionary<string, Dictionary<string, string>> recv_describe_keyspace()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        describe_keyspace_result result = new describe_keyspace_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.nfe) {
          throw result.Nfe;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "describe_keyspace failed: unknown result");
      }

      public List<string> describe_splits(string start_token, string end_token, int keys_per_split)
      {
        send_describe_splits(start_token, end_token, keys_per_split);
        return recv_describe_splits();
      }

      public void send_describe_splits(string start_token, string end_token, int keys_per_split)
      {
        oprot_.WriteMessageBegin(new TMessage("describe_splits", TMessageType.Call, seqid_));
        describe_splits_args args = new describe_splits_args();
        args.Start_token = start_token;
        args.End_token = end_token;
        args.Keys_per_split = keys_per_split;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<string> recv_describe_splits()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        describe_splits_result result = new describe_splits_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "describe_splits failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["login"] = login_Process;
        processMap_["get"] = get_Process;
        processMap_["get_slice"] = get_slice_Process;
        processMap_["multiget"] = multiget_Process;
        processMap_["multiget_slice"] = multiget_slice_Process;
        processMap_["get_count"] = get_count_Process;
        processMap_["get_range_slice"] = get_range_slice_Process;
        processMap_["get_range_slices"] = get_range_slices_Process;
        processMap_["insert"] = insert_Process;
        processMap_["batch_insert"] = batch_insert_Process;
        processMap_["remove"] = remove_Process;
        processMap_["batch_mutate"] = batch_mutate_Process;
        processMap_["get_string_property"] = get_string_property_Process;
        processMap_["get_string_list_property"] = get_string_list_property_Process;
        processMap_["describe_keyspaces"] = describe_keyspaces_Process;
        processMap_["describe_cluster_name"] = describe_cluster_name_Process;
        processMap_["describe_version"] = describe_version_Process;
        processMap_["describe_ring"] = describe_ring_Process;
        processMap_["describe_keyspace"] = describe_keyspace_Process;
        processMap_["describe_splits"] = describe_splits_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        try {
          iface_.login(args.Keyspace, args.Auth_request);
        } catch (AuthenticationException authnx) {
          result.Authnx = authnx;
        } catch (AuthorizationException authzx) {
          result.Authzx = authzx;
        }
        oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_args args = new get_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_result result = new get_result();
        try {
          result.Success = iface_.get(args.Keyspace, args.Key, args.Column_path, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (NotFoundException nfe) {
          result.Nfe = nfe;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("get", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_slice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_slice_args args = new get_slice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_slice_result result = new get_slice_result();
        try {
          result.Success = iface_.get_slice(args.Keyspace, args.Key, args.Column_parent, args.Predicate, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("get_slice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void multiget_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        multiget_args args = new multiget_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        multiget_result result = new multiget_result();
        try {
          result.Success = iface_.multiget(args.Keyspace, args.Keys, args.Column_path, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("multiget", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void multiget_slice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        multiget_slice_args args = new multiget_slice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        multiget_slice_result result = new multiget_slice_result();
        try {
          result.Success = iface_.multiget_slice(args.Keyspace, args.Keys, args.Column_parent, args.Predicate, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("multiget_slice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_count_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_count_args args = new get_count_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_count_result result = new get_count_result();
        try {
          result.Success = iface_.get_count(args.Keyspace, args.Key, args.Column_parent, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("get_count", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_range_slice_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_range_slice_args args = new get_range_slice_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_range_slice_result result = new get_range_slice_result();
        try {
          result.Success = iface_.get_range_slice(args.Keyspace, args.Column_parent, args.Predicate, args.Start_key, args.Finish_key, args.Row_count, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("get_range_slice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_range_slices_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_range_slices_args args = new get_range_slices_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_range_slices_result result = new get_range_slices_result();
        try {
          result.Success = iface_.get_range_slices(args.Keyspace, args.Column_parent, args.Predicate, args.Range, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("get_range_slices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void insert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        insert_args args = new insert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        insert_result result = new insert_result();
        try {
          iface_.insert(args.Keyspace, args.Key, args.Column_path, args.Value, args.Timestamp, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("insert", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batch_insert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batch_insert_args args = new batch_insert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batch_insert_result result = new batch_insert_result();
        try {
          iface_.batch_insert(args.Keyspace, args.Key, args.Cfmap, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("batch_insert", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void remove_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        remove_args args = new remove_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        remove_result result = new remove_result();
        try {
          iface_.remove(args.Keyspace, args.Key, args.Column_path, args.Timestamp, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("remove", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void batch_mutate_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        batch_mutate_args args = new batch_mutate_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        batch_mutate_result result = new batch_mutate_result();
        try {
          iface_.batch_mutate(args.Keyspace, args.Mutation_map, args.Consistency_level);
        } catch (InvalidRequestException ire) {
          result.Ire = ire;
        } catch (UnavailableException ue) {
          result.Ue = ue;
        } catch (TimedOutException te) {
          result.Te = te;
        }
        oprot.WriteMessageBegin(new TMessage("batch_mutate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_string_property_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_string_property_args args = new get_string_property_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_string_property_result result = new get_string_property_result();
        result.Success = iface_.get_string_property(args.Property);
        oprot.WriteMessageBegin(new TMessage("get_string_property", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_string_list_property_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_string_list_property_args args = new get_string_list_property_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_string_list_property_result result = new get_string_list_property_result();
        result.Success = iface_.get_string_list_property(args.Property);
        oprot.WriteMessageBegin(new TMessage("get_string_list_property", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void describe_keyspaces_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        describe_keyspaces_args args = new describe_keyspaces_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        describe_keyspaces_result result = new describe_keyspaces_result();
        result.Success = iface_.describe_keyspaces();
        oprot.WriteMessageBegin(new TMessage("describe_keyspaces", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void describe_cluster_name_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        describe_cluster_name_args args = new describe_cluster_name_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        describe_cluster_name_result result = new describe_cluster_name_result();
        result.Success = iface_.describe_cluster_name();
        oprot.WriteMessageBegin(new TMessage("describe_cluster_name", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void describe_version_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        describe_version_args args = new describe_version_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        describe_version_result result = new describe_version_result();
        result.Success = iface_.describe_version();
        oprot.WriteMessageBegin(new TMessage("describe_version", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void describe_ring_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        describe_ring_args args = new describe_ring_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        describe_ring_result result = new describe_ring_result();
        result.Success = iface_.describe_ring(args.Keyspace);
        oprot.WriteMessageBegin(new TMessage("describe_ring", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void describe_keyspace_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        describe_keyspace_args args = new describe_keyspace_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        describe_keyspace_result result = new describe_keyspace_result();
        try {
          result.Success = iface_.describe_keyspace(args.Keyspace);
        } catch (NotFoundException nfe) {
          result.Nfe = nfe;
        }
        oprot.WriteMessageBegin(new TMessage("describe_keyspace", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void describe_splits_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        describe_splits_args args = new describe_splits_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        describe_splits_result result = new describe_splits_result();
        result.Success = iface_.describe_splits(args.Start_token, args.End_token, args.Keys_per_split);
        oprot.WriteMessageBegin(new TMessage("describe_splits", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class login_args : TBase
    {
      private string keyspace;
      private AuthenticationRequest auth_request;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public AuthenticationRequest Auth_request
      {
        get
        {
          return auth_request;
        }
        set
        {
          __isset.auth_request = true;
          this.auth_request = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool auth_request;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.auth_request = new AuthenticationRequest();
                this.auth_request.Read(iprot);
                this.__isset.auth_request = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.auth_request != null && __isset.auth_request) {
          field.Name = "auth_request";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.auth_request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("login_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",auth_request: ");
        sb.Append(this.auth_request== null ? "<null>" : this.auth_request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class login_result : TBase
    {
      private AuthenticationException authnx;
      private AuthorizationException authzx;

      public AuthenticationException Authnx
      {
        get
        {
          return authnx;
        }
        set
        {
          __isset.authnx = true;
          this.authnx = value;
        }
      }

      public AuthorizationException Authzx
      {
        get
        {
          return authzx;
        }
        set
        {
          __isset.authzx = true;
          this.authzx = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool authnx;
        public bool authzx;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.authnx = new AuthenticationException();
                this.authnx.Read(iprot);
                this.__isset.authnx = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.authzx = new AuthorizationException();
                this.authzx.Read(iprot);
                this.__isset.authzx = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("login_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.authnx) {
          if (this.authnx != null) {
            field.Name = "authnx";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.authnx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.authzx) {
          if (this.authzx != null) {
            field.Name = "authzx";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.authzx.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("login_result(");
        sb.Append("authnx: ");
        sb.Append(this.authnx== null ? "<null>" : this.authnx.ToString());
        sb.Append(",authzx: ");
        sb.Append(this.authzx== null ? "<null>" : this.authzx.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_args : TBase
    {
      private string keyspace;
      private string key;
      private ColumnPath column_path;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public string Key
      {
        get
        {
          return key;
        }
        set
        {
          __isset.key = true;
          this.key = value;
        }
      }

      public ColumnPath Column_path
      {
        get
        {
          return column_path;
        }
        set
        {
          __isset.column_path = true;
          this.column_path = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool key;
        public bool column_path;
        public bool consistency_level;
      }

      public get_args() {
        this.consistency_level = (ConsistencyLevel)1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.key = iprot.ReadString();
                this.__isset.key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.column_path = new ColumnPath();
                this.column_path.Read(iprot);
                this.__isset.column_path = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.key);
          oprot.WriteFieldEnd();
        }
        if (this.column_path != null && __isset.column_path) {
          field.Name = "column_path";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.column_path.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",key: ");
        sb.Append(this.key);
        sb.Append(",column_path: ");
        sb.Append(this.column_path== null ? "<null>" : this.column_path.ToString());
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_result : TBase
    {
      private ColumnOrSuperColumn success;
      private InvalidRequestException ire;
      private NotFoundException nfe;
      private UnavailableException ue;
      private TimedOutException te;

      public ColumnOrSuperColumn Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public NotFoundException Nfe
      {
        get
        {
          return nfe;
        }
        set
        {
          __isset.nfe = true;
          this.nfe = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ire;
        public bool nfe;
        public bool ue;
        public bool te;
      }

      public get_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new ColumnOrSuperColumn();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.nfe = new NotFoundException();
                this.nfe.Read(iprot);
                this.__isset.nfe = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.nfe) {
          if (this.nfe != null) {
            field.Name = "nfe";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.nfe.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",nfe: ");
        sb.Append(this.nfe== null ? "<null>" : this.nfe.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_slice_args : TBase
    {
      private string keyspace;
      private string key;
      private ColumnParent column_parent;
      private SlicePredicate predicate;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public string Key
      {
        get
        {
          return key;
        }
        set
        {
          __isset.key = true;
          this.key = value;
        }
      }

      public ColumnParent Column_parent
      {
        get
        {
          return column_parent;
        }
        set
        {
          __isset.column_parent = true;
          this.column_parent = value;
        }
      }

      public SlicePredicate Predicate
      {
        get
        {
          return predicate;
        }
        set
        {
          __isset.predicate = true;
          this.predicate = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool key;
        public bool column_parent;
        public bool predicate;
        public bool consistency_level;
      }

      public get_slice_args() {
        this.consistency_level = (ConsistencyLevel)1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.key = iprot.ReadString();
                this.__isset.key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.column_parent = new ColumnParent();
                this.column_parent.Read(iprot);
                this.__isset.column_parent = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                this.predicate = new SlicePredicate();
                this.predicate.Read(iprot);
                this.__isset.predicate = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_slice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.key);
          oprot.WriteFieldEnd();
        }
        if (this.column_parent != null && __isset.column_parent) {
          field.Name = "column_parent";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.column_parent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (this.predicate != null && __isset.predicate) {
          field.Name = "predicate";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          this.predicate.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_slice_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",key: ");
        sb.Append(this.key);
        sb.Append(",column_parent: ");
        sb.Append(this.column_parent== null ? "<null>" : this.column_parent.ToString());
        sb.Append(",predicate: ");
        sb.Append(this.predicate== null ? "<null>" : this.predicate.ToString());
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_slice_result : TBase
    {
      private List<ColumnOrSuperColumn> success;
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public List<ColumnOrSuperColumn> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ire;
        public bool ue;
        public bool te;
      }

      public get_slice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<ColumnOrSuperColumn>();
                  TList _list25 = iprot.ReadListBegin();
                  for( int _i26 = 0; _i26 < _list25.Count; ++_i26)
                  {
                    ColumnOrSuperColumn _elem27 = new ColumnOrSuperColumn();
                    _elem27 = new ColumnOrSuperColumn();
                    _elem27.Read(iprot);
                    this.success.Add(_elem27);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_slice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (ColumnOrSuperColumn _iter28 in this.success)
              {
                _iter28.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_slice_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class multiget_args : TBase
    {
      private string keyspace;
      private List<string> keys;
      private ColumnPath column_path;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public List<string> Keys
      {
        get
        {
          return keys;
        }
        set
        {
          __isset.keys = true;
          this.keys = value;
        }
      }

      public ColumnPath Column_path
      {
        get
        {
          return column_path;
        }
        set
        {
          __isset.column_path = true;
          this.column_path = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool keys;
        public bool column_path;
        public bool consistency_level;
      }

      public multiget_args() {
        this.consistency_level = (ConsistencyLevel)1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  this.keys = new List<string>();
                  TList _list29 = iprot.ReadListBegin();
                  for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                  {
                    string _elem31 = null;
                    _elem31 = iprot.ReadString();
                    this.keys.Add(_elem31);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.keys = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.column_path = new ColumnPath();
                this.column_path.Read(iprot);
                this.__isset.column_path = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("multiget_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.keys != null && __isset.keys) {
          field.Name = "keys";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, this.keys.Count));
            foreach (string _iter32 in this.keys)
            {
              oprot.WriteString(_iter32);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (this.column_path != null && __isset.column_path) {
          field.Name = "column_path";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.column_path.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("multiget_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",keys: ");
        sb.Append(this.keys);
        sb.Append(",column_path: ");
        sb.Append(this.column_path== null ? "<null>" : this.column_path.ToString());
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class multiget_result : TBase
    {
      private Dictionary<string, ColumnOrSuperColumn> success;
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public Dictionary<string, ColumnOrSuperColumn> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ire;
        public bool ue;
        public bool te;
      }

      public multiget_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  this.success = new Dictionary<string, ColumnOrSuperColumn>();
                  TMap _map33 = iprot.ReadMapBegin();
                  for( int _i34 = 0; _i34 < _map33.Count; ++_i34)
                  {
                    string _key35;
                    ColumnOrSuperColumn _val36;
                    _key35 = iprot.ReadString();
                    _val36 = new ColumnOrSuperColumn();
                    _val36.Read(iprot);
                    this.success[_key35] = _val36;
                  }
                  iprot.ReadMapEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("multiget_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, this.success.Count));
              foreach (string _iter37 in this.success.Keys)
              {
                oprot.WriteString(_iter37);
                this.success[_iter37].Write(oprot);
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("multiget_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class multiget_slice_args : TBase
    {
      private string keyspace;
      private List<string> keys;
      private ColumnParent column_parent;
      private SlicePredicate predicate;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public List<string> Keys
      {
        get
        {
          return keys;
        }
        set
        {
          __isset.keys = true;
          this.keys = value;
        }
      }

      public ColumnParent Column_parent
      {
        get
        {
          return column_parent;
        }
        set
        {
          __isset.column_parent = true;
          this.column_parent = value;
        }
      }

      public SlicePredicate Predicate
      {
        get
        {
          return predicate;
        }
        set
        {
          __isset.predicate = true;
          this.predicate = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool keys;
        public bool column_parent;
        public bool predicate;
        public bool consistency_level;
      }

      public multiget_slice_args() {
        this.consistency_level = (ConsistencyLevel)1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  this.keys = new List<string>();
                  TList _list38 = iprot.ReadListBegin();
                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                  {
                    string _elem40 = null;
                    _elem40 = iprot.ReadString();
                    this.keys.Add(_elem40);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.keys = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.column_parent = new ColumnParent();
                this.column_parent.Read(iprot);
                this.__isset.column_parent = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                this.predicate = new SlicePredicate();
                this.predicate.Read(iprot);
                this.__isset.predicate = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("multiget_slice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.keys != null && __isset.keys) {
          field.Name = "keys";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, this.keys.Count));
            foreach (string _iter41 in this.keys)
            {
              oprot.WriteString(_iter41);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (this.column_parent != null && __isset.column_parent) {
          field.Name = "column_parent";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.column_parent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (this.predicate != null && __isset.predicate) {
          field.Name = "predicate";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          this.predicate.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("multiget_slice_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",keys: ");
        sb.Append(this.keys);
        sb.Append(",column_parent: ");
        sb.Append(this.column_parent== null ? "<null>" : this.column_parent.ToString());
        sb.Append(",predicate: ");
        sb.Append(this.predicate== null ? "<null>" : this.predicate.ToString());
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class multiget_slice_result : TBase
    {
      private Dictionary<string, List<ColumnOrSuperColumn>> success;
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public Dictionary<string, List<ColumnOrSuperColumn>> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ire;
        public bool ue;
        public bool te;
      }

      public multiget_slice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  this.success = new Dictionary<string, List<ColumnOrSuperColumn>>();
                  TMap _map42 = iprot.ReadMapBegin();
                  for( int _i43 = 0; _i43 < _map42.Count; ++_i43)
                  {
                    string _key44;
                    List<ColumnOrSuperColumn> _val45;
                    _key44 = iprot.ReadString();
                    {
                      _val45 = new List<ColumnOrSuperColumn>();
                      TList _list46 = iprot.ReadListBegin();
                      for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                      {
                        ColumnOrSuperColumn _elem48 = new ColumnOrSuperColumn();
                        _elem48 = new ColumnOrSuperColumn();
                        _elem48.Read(iprot);
                        _val45.Add(_elem48);
                      }
                      iprot.ReadListEnd();
                    }
                    this.success[_key44] = _val45;
                  }
                  iprot.ReadMapEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("multiget_slice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.List, this.success.Count));
              foreach (string _iter49 in this.success.Keys)
              {
                oprot.WriteString(_iter49);
                {
                  oprot.WriteListBegin(new TList(TType.Struct, this.success[_iter49].Count));
                  foreach (ColumnOrSuperColumn _iter50 in this.success[_iter49])
                  {
                    _iter50.Write(oprot);
                    oprot.WriteListEnd();
                  }
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("multiget_slice_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_count_args : TBase
    {
      private string keyspace;
      private string key;
      private ColumnParent column_parent;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public string Key
      {
        get
        {
          return key;
        }
        set
        {
          __isset.key = true;
          this.key = value;
        }
      }

      public ColumnParent Column_parent
      {
        get
        {
          return column_parent;
        }
        set
        {
          __isset.column_parent = true;
          this.column_parent = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool key;
        public bool column_parent;
        public bool consistency_level;
      }

      public get_count_args() {
        this.consistency_level = (ConsistencyLevel)1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.key = iprot.ReadString();
                this.__isset.key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.column_parent = new ColumnParent();
                this.column_parent.Read(iprot);
                this.__isset.column_parent = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_count_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.key);
          oprot.WriteFieldEnd();
        }
        if (this.column_parent != null && __isset.column_parent) {
          field.Name = "column_parent";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.column_parent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_count_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",key: ");
        sb.Append(this.key);
        sb.Append(",column_parent: ");
        sb.Append(this.column_parent== null ? "<null>" : this.column_parent.ToString());
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_count_result : TBase
    {
      private int success;
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public int Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ire;
        public bool ue;
        public bool te;
      }

      public get_count_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                this.success = iprot.ReadI32();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_count_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_count_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_range_slice_args : TBase
    {
      private string keyspace;
      private ColumnParent column_parent;
      private SlicePredicate predicate;
      private string start_key;
      private string finish_key;
      private int row_count;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public ColumnParent Column_parent
      {
        get
        {
          return column_parent;
        }
        set
        {
          __isset.column_parent = true;
          this.column_parent = value;
        }
      }

      public SlicePredicate Predicate
      {
        get
        {
          return predicate;
        }
        set
        {
          __isset.predicate = true;
          this.predicate = value;
        }
      }

      public string Start_key
      {
        get
        {
          return start_key;
        }
        set
        {
          __isset.start_key = true;
          this.start_key = value;
        }
      }

      public string Finish_key
      {
        get
        {
          return finish_key;
        }
        set
        {
          __isset.finish_key = true;
          this.finish_key = value;
        }
      }

      public int Row_count
      {
        get
        {
          return row_count;
        }
        set
        {
          __isset.row_count = true;
          this.row_count = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool column_parent;
        public bool predicate;
        public bool start_key;
        public bool finish_key;
        public bool row_count;
        public bool consistency_level;
      }

      public get_range_slice_args() {
        this.start_key = "";
        this.finish_key = "";
        this.row_count = 100;
        this.consistency_level = (ConsistencyLevel)1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.column_parent = new ColumnParent();
                this.column_parent.Read(iprot);
                this.__isset.column_parent = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.predicate = new SlicePredicate();
                this.predicate.Read(iprot);
                this.__isset.predicate = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                this.start_key = iprot.ReadString();
                this.__isset.start_key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                this.finish_key = iprot.ReadString();
                this.__isset.finish_key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                this.row_count = iprot.ReadI32();
                this.__isset.row_count = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_range_slice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.column_parent != null && __isset.column_parent) {
          field.Name = "column_parent";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.column_parent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (this.predicate != null && __isset.predicate) {
          field.Name = "predicate";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.predicate.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (this.start_key != null && __isset.start_key) {
          field.Name = "start_key";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.start_key);
          oprot.WriteFieldEnd();
        }
        if (this.finish_key != null && __isset.finish_key) {
          field.Name = "finish_key";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.finish_key);
          oprot.WriteFieldEnd();
        }
        if (__isset.row_count) {
          field.Name = "row_count";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.row_count);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_range_slice_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",column_parent: ");
        sb.Append(this.column_parent== null ? "<null>" : this.column_parent.ToString());
        sb.Append(",predicate: ");
        sb.Append(this.predicate== null ? "<null>" : this.predicate.ToString());
        sb.Append(",start_key: ");
        sb.Append(this.start_key);
        sb.Append(",finish_key: ");
        sb.Append(this.finish_key);
        sb.Append(",row_count: ");
        sb.Append(this.row_count);
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_range_slice_result : TBase
    {
      private List<KeySlice> success;
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public List<KeySlice> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ire;
        public bool ue;
        public bool te;
      }

      public get_range_slice_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<KeySlice>();
                  TList _list51 = iprot.ReadListBegin();
                  for( int _i52 = 0; _i52 < _list51.Count; ++_i52)
                  {
                    KeySlice _elem53 = new KeySlice();
                    _elem53 = new KeySlice();
                    _elem53.Read(iprot);
                    this.success.Add(_elem53);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_range_slice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (KeySlice _iter54 in this.success)
              {
                _iter54.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_range_slice_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_range_slices_args : TBase
    {
      private string keyspace;
      private ColumnParent column_parent;
      private SlicePredicate predicate;
      private KeyRange range;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public ColumnParent Column_parent
      {
        get
        {
          return column_parent;
        }
        set
        {
          __isset.column_parent = true;
          this.column_parent = value;
        }
      }

      public SlicePredicate Predicate
      {
        get
        {
          return predicate;
        }
        set
        {
          __isset.predicate = true;
          this.predicate = value;
        }
      }

      public KeyRange Range
      {
        get
        {
          return range;
        }
        set
        {
          __isset.range = true;
          this.range = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool column_parent;
        public bool predicate;
        public bool range;
        public bool consistency_level;
      }

      public get_range_slices_args() {
        this.consistency_level = (ConsistencyLevel)1;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.column_parent = new ColumnParent();
                this.column_parent.Read(iprot);
                this.__isset.column_parent = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.predicate = new SlicePredicate();
                this.predicate.Read(iprot);
                this.__isset.predicate = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                this.range = new KeyRange();
                this.range.Read(iprot);
                this.__isset.range = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_range_slices_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.column_parent != null && __isset.column_parent) {
          field.Name = "column_parent";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          this.column_parent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (this.predicate != null && __isset.predicate) {
          field.Name = "predicate";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.predicate.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (this.range != null && __isset.range) {
          field.Name = "range";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          this.range.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_range_slices_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",column_parent: ");
        sb.Append(this.column_parent== null ? "<null>" : this.column_parent.ToString());
        sb.Append(",predicate: ");
        sb.Append(this.predicate== null ? "<null>" : this.predicate.ToString());
        sb.Append(",range: ");
        sb.Append(this.range== null ? "<null>" : this.range.ToString());
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_range_slices_result : TBase
    {
      private List<KeySlice> success;
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public List<KeySlice> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ire;
        public bool ue;
        public bool te;
      }

      public get_range_slices_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<KeySlice>();
                  TList _list55 = iprot.ReadListBegin();
                  for( int _i56 = 0; _i56 < _list55.Count; ++_i56)
                  {
                    KeySlice _elem57 = new KeySlice();
                    _elem57 = new KeySlice();
                    _elem57.Read(iprot);
                    this.success.Add(_elem57);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_range_slices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (KeySlice _iter58 in this.success)
              {
                _iter58.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_range_slices_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class insert_args : TBase
    {
      private string keyspace;
      private string key;
      private ColumnPath column_path;
      private byte[] value;
      private long timestamp;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public string Key
      {
        get
        {
          return key;
        }
        set
        {
          __isset.key = true;
          this.key = value;
        }
      }

      public ColumnPath Column_path
      {
        get
        {
          return column_path;
        }
        set
        {
          __isset.column_path = true;
          this.column_path = value;
        }
      }

      public byte[] Value
      {
        get
        {
          return value;
        }
        set
        {
          __isset.value = true;
          this.value = value;
        }
      }

      public long Timestamp
      {
        get
        {
          return timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this.timestamp = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool key;
        public bool column_path;
        public bool value;
        public bool timestamp;
        public bool consistency_level;
      }

      public insert_args() {
        this.consistency_level = (ConsistencyLevel)0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.key = iprot.ReadString();
                this.__isset.key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.column_path = new ColumnPath();
                this.column_path.Read(iprot);
                this.__isset.column_path = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                this.value = iprot.ReadBinary();
                this.__isset.value = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("insert_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.key);
          oprot.WriteFieldEnd();
        }
        if (this.column_path != null && __isset.column_path) {
          field.Name = "column_path";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.column_path.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (this.value != null && __isset.value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(this.value);
          oprot.WriteFieldEnd();
        }
        if (__isset.timestamp) {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(this.timestamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("insert_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",key: ");
        sb.Append(this.key);
        sb.Append(",column_path: ");
        sb.Append(this.column_path== null ? "<null>" : this.column_path.ToString());
        sb.Append(",value: ");
        sb.Append(this.value);
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class insert_result : TBase
    {
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ire;
        public bool ue;
        public bool te;
      }

      public insert_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("insert_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("insert_result(");
        sb.Append("ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class batch_insert_args : TBase
    {
      private string keyspace;
      private string key;
      private Dictionary<string, List<ColumnOrSuperColumn>> cfmap;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public string Key
      {
        get
        {
          return key;
        }
        set
        {
          __isset.key = true;
          this.key = value;
        }
      }

      public Dictionary<string, List<ColumnOrSuperColumn>> Cfmap
      {
        get
        {
          return cfmap;
        }
        set
        {
          __isset.cfmap = true;
          this.cfmap = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool key;
        public bool cfmap;
        public bool consistency_level;
      }

      public batch_insert_args() {
        this.consistency_level = (ConsistencyLevel)0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.key = iprot.ReadString();
                this.__isset.key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  this.cfmap = new Dictionary<string, List<ColumnOrSuperColumn>>();
                  TMap _map59 = iprot.ReadMapBegin();
                  for( int _i60 = 0; _i60 < _map59.Count; ++_i60)
                  {
                    string _key61;
                    List<ColumnOrSuperColumn> _val62;
                    _key61 = iprot.ReadString();
                    {
                      _val62 = new List<ColumnOrSuperColumn>();
                      TList _list63 = iprot.ReadListBegin();
                      for( int _i64 = 0; _i64 < _list63.Count; ++_i64)
                      {
                        ColumnOrSuperColumn _elem65 = new ColumnOrSuperColumn();
                        _elem65 = new ColumnOrSuperColumn();
                        _elem65.Read(iprot);
                        _val62.Add(_elem65);
                      }
                      iprot.ReadListEnd();
                    }
                    this.cfmap[_key61] = _val62;
                  }
                  iprot.ReadMapEnd();
                }
                this.__isset.cfmap = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batch_insert_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.key);
          oprot.WriteFieldEnd();
        }
        if (this.cfmap != null && __isset.cfmap) {
          field.Name = "cfmap";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.List, this.cfmap.Count));
            foreach (string _iter66 in this.cfmap.Keys)
            {
              oprot.WriteString(_iter66);
              {
                oprot.WriteListBegin(new TList(TType.Struct, this.cfmap[_iter66].Count));
                foreach (ColumnOrSuperColumn _iter67 in this.cfmap[_iter66])
                {
                  _iter67.Write(oprot);
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batch_insert_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",key: ");
        sb.Append(this.key);
        sb.Append(",cfmap: ");
        sb.Append(this.cfmap);
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class batch_insert_result : TBase
    {
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ire;
        public bool ue;
        public bool te;
      }

      public batch_insert_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batch_insert_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batch_insert_result(");
        sb.Append("ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class remove_args : TBase
    {
      private string keyspace;
      private string key;
      private ColumnPath column_path;
      private long timestamp;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public string Key
      {
        get
        {
          return key;
        }
        set
        {
          __isset.key = true;
          this.key = value;
        }
      }

      public ColumnPath Column_path
      {
        get
        {
          return column_path;
        }
        set
        {
          __isset.column_path = true;
          this.column_path = value;
        }
      }

      public long Timestamp
      {
        get
        {
          return timestamp;
        }
        set
        {
          __isset.timestamp = true;
          this.timestamp = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool key;
        public bool column_path;
        public bool timestamp;
        public bool consistency_level;
      }

      public remove_args() {
        this.consistency_level = (ConsistencyLevel)0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.key = iprot.ReadString();
                this.__isset.key = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.column_path = new ColumnPath();
                this.column_path.Read(iprot);
                this.__isset.column_path = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                this.timestamp = iprot.ReadI64();
                this.__isset.timestamp = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("remove_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.key);
          oprot.WriteFieldEnd();
        }
        if (this.column_path != null && __isset.column_path) {
          field.Name = "column_path";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          this.column_path.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.timestamp) {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(this.timestamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("remove_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",key: ");
        sb.Append(this.key);
        sb.Append(",column_path: ");
        sb.Append(this.column_path== null ? "<null>" : this.column_path.ToString());
        sb.Append(",timestamp: ");
        sb.Append(this.timestamp);
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class remove_result : TBase
    {
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ire;
        public bool ue;
        public bool te;
      }

      public remove_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("remove_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("remove_result(");
        sb.Append("ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class batch_mutate_args : TBase
    {
      private string keyspace;
      private Dictionary<string, Dictionary<string, List<Mutation>>> mutation_map;
      private ConsistencyLevel consistency_level;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }

      public Dictionary<string, Dictionary<string, List<Mutation>>> Mutation_map
      {
        get
        {
          return mutation_map;
        }
        set
        {
          __isset.mutation_map = true;
          this.mutation_map = value;
        }
      }

      public ConsistencyLevel Consistency_level
      {
        get
        {
          return consistency_level;
        }
        set
        {
          __isset.consistency_level = true;
          this.consistency_level = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
        public bool mutation_map;
        public bool consistency_level;
      }

      public batch_mutate_args() {
        this.consistency_level = (ConsistencyLevel)0;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  this.mutation_map = new Dictionary<string, Dictionary<string, List<Mutation>>>();
                  TMap _map68 = iprot.ReadMapBegin();
                  for( int _i69 = 0; _i69 < _map68.Count; ++_i69)
                  {
                    string _key70;
                    Dictionary<string, List<Mutation>> _val71;
                    _key70 = iprot.ReadString();
                    {
                      _val71 = new Dictionary<string, List<Mutation>>();
                      TMap _map72 = iprot.ReadMapBegin();
                      for( int _i73 = 0; _i73 < _map72.Count; ++_i73)
                      {
                        string _key74;
                        List<Mutation> _val75;
                        _key74 = iprot.ReadString();
                        {
                          _val75 = new List<Mutation>();
                          TList _list76 = iprot.ReadListBegin();
                          for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                          {
                            Mutation _elem78 = new Mutation();
                            _elem78 = new Mutation();
                            _elem78.Read(iprot);
                            _val75.Add(_elem78);
                          }
                          iprot.ReadListEnd();
                        }
                        _val71[_key74] = _val75;
                      }
                      iprot.ReadMapEnd();
                    }
                    this.mutation_map[_key70] = _val71;
                  }
                  iprot.ReadMapEnd();
                }
                this.__isset.mutation_map = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                this.consistency_level = (ConsistencyLevel)iprot.ReadI32();
                this.__isset.consistency_level = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batch_mutate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        if (this.mutation_map != null && __isset.mutation_map) {
          field.Name = "mutation_map";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.Map, this.mutation_map.Count));
            foreach (string _iter79 in this.mutation_map.Keys)
            {
              oprot.WriteString(_iter79);
              {
                oprot.WriteMapBegin(new TMap(TType.String, TType.List, this.mutation_map[_iter79].Count));
                foreach (string _iter80 in this.mutation_map[_iter79].Keys)
                {
                  oprot.WriteString(_iter80);
                  {
                    oprot.WriteListBegin(new TList(TType.Struct, this.mutation_map[_iter79][_iter80].Count));
                    foreach (Mutation _iter81 in this.mutation_map[_iter79][_iter80])
                    {
                      _iter81.Write(oprot);
                      oprot.WriteListEnd();
                    }
                  }
                  oprot.WriteMapEnd();
                }
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.consistency_level) {
          field.Name = "consistency_level";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)this.consistency_level);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batch_mutate_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(",mutation_map: ");
        sb.Append(this.mutation_map);
        sb.Append(",consistency_level: ");
        sb.Append(this.consistency_level);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class batch_mutate_result : TBase
    {
      private InvalidRequestException ire;
      private UnavailableException ue;
      private TimedOutException te;

      public InvalidRequestException Ire
      {
        get
        {
          return ire;
        }
        set
        {
          __isset.ire = true;
          this.ire = value;
        }
      }

      public UnavailableException Ue
      {
        get
        {
          return ue;
        }
        set
        {
          __isset.ue = true;
          this.ue = value;
        }
      }

      public TimedOutException Te
      {
        get
        {
          return te;
        }
        set
        {
          __isset.te = true;
          this.te = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ire;
        public bool ue;
        public bool te;
      }

      public batch_mutate_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.ire = new InvalidRequestException();
                this.ire.Read(iprot);
                this.__isset.ire = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                this.ue = new UnavailableException();
                this.ue.Read(iprot);
                this.__isset.ue = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                this.te = new TimedOutException();
                this.te.Read(iprot);
                this.__isset.te = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("batch_mutate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ire) {
          if (this.ire != null) {
            field.Name = "ire";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ire.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ue) {
          if (this.ue != null) {
            field.Name = "ue";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            this.ue.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.te) {
          if (this.te != null) {
            field.Name = "te";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            this.te.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("batch_mutate_result(");
        sb.Append("ire: ");
        sb.Append(this.ire== null ? "<null>" : this.ire.ToString());
        sb.Append(",ue: ");
        sb.Append(this.ue== null ? "<null>" : this.ue.ToString());
        sb.Append(",te: ");
        sb.Append(this.te== null ? "<null>" : this.te.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_string_property_args : TBase
    {
      private string property;

      public string Property
      {
        get
        {
          return property;
        }
        set
        {
          __isset.property = true;
          this.property = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool property;
      }

      public get_string_property_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.property = iprot.ReadString();
                this.__isset.property = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_string_property_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.property != null && __isset.property) {
          field.Name = "property";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.property);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_string_property_args(");
        sb.Append("property: ");
        sb.Append(this.property);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_string_property_result : TBase
    {
      private string success;

      public string Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public get_string_property_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                this.success = iprot.ReadString();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_string_property_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(this.success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_string_property_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_string_list_property_args : TBase
    {
      private string property;

      public string Property
      {
        get
        {
          return property;
        }
        set
        {
          __isset.property = true;
          this.property = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool property;
      }

      public get_string_list_property_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.property = iprot.ReadString();
                this.__isset.property = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_string_list_property_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.property != null && __isset.property) {
          field.Name = "property";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.property);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_string_list_property_args(");
        sb.Append("property: ");
        sb.Append(this.property);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_string_list_property_result : TBase
    {
      private List<string> success;

      public List<string> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public get_string_list_property_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<string>();
                  TList _list82 = iprot.ReadListBegin();
                  for( int _i83 = 0; _i83 < _list82.Count; ++_i83)
                  {
                    string _elem84 = null;
                    _elem84 = iprot.ReadString();
                    this.success.Add(_elem84);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_string_list_property_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, this.success.Count));
              foreach (string _iter85 in this.success)
              {
                oprot.WriteString(_iter85);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_string_list_property_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_keyspaces_args : TBase
    {

      public describe_keyspaces_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_keyspaces_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_keyspaces_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_keyspaces_result : TBase
    {
      private THashSet<string> success;

      public THashSet<string> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public describe_keyspaces_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  this.success = new THashSet<string>();
                  TSet _set86 = iprot.ReadSetBegin();
                  for( int _i87 = 0; _i87 < _set86.Count; ++_i87)
                  {
                    string _elem88 = null;
                    _elem88 = iprot.ReadString();
                    this.success.Add(_elem88);
                  }
                  iprot.ReadSetEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_keyspaces_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.String, this.success.Count));
              foreach (string _iter89 in this.success)
              {
                oprot.WriteString(_iter89);
                oprot.WriteSetEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_keyspaces_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_cluster_name_args : TBase
    {

      public describe_cluster_name_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_cluster_name_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_cluster_name_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_cluster_name_result : TBase
    {
      private string success;

      public string Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public describe_cluster_name_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                this.success = iprot.ReadString();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_cluster_name_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(this.success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_cluster_name_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_version_args : TBase
    {

      public describe_version_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_version_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_version_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_version_result : TBase
    {
      private string success;

      public string Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public describe_version_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                this.success = iprot.ReadString();
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_version_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(this.success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_version_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_ring_args : TBase
    {
      private string keyspace;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
      }

      public describe_ring_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_ring_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_ring_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_ring_result : TBase
    {
      private List<TokenRange> success;

      public List<TokenRange> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public describe_ring_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<TokenRange>();
                  TList _list90 = iprot.ReadListBegin();
                  for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                  {
                    TokenRange _elem92 = new TokenRange();
                    _elem92 = new TokenRange();
                    _elem92.Read(iprot);
                    this.success.Add(_elem92);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_ring_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (TokenRange _iter93 in this.success)
              {
                _iter93.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_ring_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_keyspace_args : TBase
    {
      private string keyspace;

      public string Keyspace
      {
        get
        {
          return keyspace;
        }
        set
        {
          __isset.keyspace = true;
          this.keyspace = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool keyspace;
      }

      public describe_keyspace_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.keyspace = iprot.ReadString();
                this.__isset.keyspace = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_keyspace_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.keyspace != null && __isset.keyspace) {
          field.Name = "keyspace";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.keyspace);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_keyspace_args(");
        sb.Append("keyspace: ");
        sb.Append(this.keyspace);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_keyspace_result : TBase
    {
      private Dictionary<string, Dictionary<string, string>> success;
      private NotFoundException nfe;

      public Dictionary<string, Dictionary<string, string>> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public NotFoundException Nfe
      {
        get
        {
          return nfe;
        }
        set
        {
          __isset.nfe = true;
          this.nfe = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool nfe;
      }

      public describe_keyspace_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  this.success = new Dictionary<string, Dictionary<string, string>>();
                  TMap _map94 = iprot.ReadMapBegin();
                  for( int _i95 = 0; _i95 < _map94.Count; ++_i95)
                  {
                    string _key96;
                    Dictionary<string, string> _val97;
                    _key96 = iprot.ReadString();
                    {
                      _val97 = new Dictionary<string, string>();
                      TMap _map98 = iprot.ReadMapBegin();
                      for( int _i99 = 0; _i99 < _map98.Count; ++_i99)
                      {
                        string _key100;
                        string _val101;
                        _key100 = iprot.ReadString();
                        _val101 = iprot.ReadString();
                        _val97[_key100] = _val101;
                      }
                      iprot.ReadMapEnd();
                    }
                    this.success[_key96] = _val97;
                  }
                  iprot.ReadMapEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.nfe = new NotFoundException();
                this.nfe.Read(iprot);
                this.__isset.nfe = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_keyspace_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Map, this.success.Count));
              foreach (string _iter102 in this.success.Keys)
              {
                oprot.WriteString(_iter102);
                {
                  oprot.WriteMapBegin(new TMap(TType.String, TType.String, this.success[_iter102].Count));
                  foreach (string _iter103 in this.success[_iter102].Keys)
                  {
                    oprot.WriteString(_iter103);
                    oprot.WriteString(this.success[_iter102][_iter103]);
                    oprot.WriteMapEnd();
                  }
                }
                oprot.WriteMapEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.nfe) {
          if (this.nfe != null) {
            field.Name = "nfe";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.nfe.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_keyspace_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(",nfe: ");
        sb.Append(this.nfe== null ? "<null>" : this.nfe.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_splits_args : TBase
    {
      private string start_token;
      private string end_token;
      private int keys_per_split;

      public string Start_token
      {
        get
        {
          return start_token;
        }
        set
        {
          __isset.start_token = true;
          this.start_token = value;
        }
      }

      public string End_token
      {
        get
        {
          return end_token;
        }
        set
        {
          __isset.end_token = true;
          this.end_token = value;
        }
      }

      public int Keys_per_split
      {
        get
        {
          return keys_per_split;
        }
        set
        {
          __isset.keys_per_split = true;
          this.keys_per_split = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool start_token;
        public bool end_token;
        public bool keys_per_split;
      }

      public describe_splits_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.start_token = iprot.ReadString();
                this.__isset.start_token = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.end_token = iprot.ReadString();
                this.__isset.end_token = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                this.keys_per_split = iprot.ReadI32();
                this.__isset.keys_per_split = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_splits_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.start_token != null && __isset.start_token) {
          field.Name = "start_token";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.start_token);
          oprot.WriteFieldEnd();
        }
        if (this.end_token != null && __isset.end_token) {
          field.Name = "end_token";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.end_token);
          oprot.WriteFieldEnd();
        }
        if (__isset.keys_per_split) {
          field.Name = "keys_per_split";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(this.keys_per_split);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_splits_args(");
        sb.Append("start_token: ");
        sb.Append(this.start_token);
        sb.Append(",end_token: ");
        sb.Append(this.end_token);
        sb.Append(",keys_per_split: ");
        sb.Append(this.keys_per_split);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class describe_splits_result : TBase
    {
      private List<string> success;

      public List<string> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public describe_splits_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<string>();
                  TList _list104 = iprot.ReadListBegin();
                  for( int _i105 = 0; _i105 < _list104.Count; ++_i105)
                  {
                    string _elem106 = null;
                    _elem106 = iprot.ReadString();
                    this.success.Add(_elem106);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("describe_splits_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, this.success.Count));
              foreach (string _iter107 in this.success)
              {
                oprot.WriteString(_iter107);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("describe_splits_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
